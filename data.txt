{% comment %} <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OTP Verification</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #dcd6f7;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }
        .otp-box {
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
        }
        .otp-input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 24px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 8px;
        }
    </style>
</head>
<body>

<div class="otp-box">
    <h2>Enter OTP</h2>

    {% if messages %}
            <div id="otp-alerts" class="mt-3">
                {% for message in messages %}
                <div class="alert alert-{{ message.tags }} alert-dismissible fade show"
                    role="alert"
                    style="font-size: 0.9rem;
                            color: {% if 'error' in message.tags %}red{% elif 'success' in message.tags %}green{% else %}black{% endif %};">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                {% endfor %}
            </div>
            {% endif %}

    <!-- OTP form -->
    <form method="POST" action="">
        {% csrf_token %}
        <div class="d-flex justify-content-center mb-3">
            {% for i in "123456" %}
                <input type="text" name="otp{{ forloop.counter }}" maxlength="1" class="otp-input" required>
            {% endfor %}
        </div>
        <button type="submit" class="btn btn-primary">Verify</button>
    </form>

    <p class="mt-3">Didn't receive code? <a href="#">Request again</a></p>
</div>

<!-- Bootstrap and Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>

    // Auto-focus to next input box
    const inputs = document.querySelectorAll('.otp-input');
    inputs.forEach((input, i) => {
        input.addEventListener('input', () => {
            if (input.value.length === 1 && i < inputs.length - 1) {
                inputs[i + 1].focus();
            }
        });
    });
</script>

</body>
</html> {% endcomment %}















{% extends 'admin_base.html' %}

{% block title %}Category | Walkoria{% endblock %}

{% block page_title %}Category{% endblock %}

{% block extra_styles %}
/* Category Management Styles */
.category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
}

.add-category-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.add-category-btn:hover {
    background-color: #e63384;
    transform: translateY(-2px);
}

.category-table-container {
    background: white;
    border-radius: 15px;
    padding: 25px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    overflow-x: auto;
}

.category-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.category-table th,
.category-table td {
    padding: 15px;
    text-align: left;
    border-bottom: 1px solid #f1f1f1;
}

.category-table th {
    background-color: #f8f9fa;
    font-weight: 600;
    color: #2c3e50;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.category-table td {
    font-size: 14px;
    color: #495057;
}

.category-table tbody tr:hover {
    background-color: #f8f9fa;
}

.status-toggle {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
}

.status-toggle input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 24px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #28a745;
}

input:checked + .toggle-slider:before {
    transform: translateX(26px);
}

.edit-btn, .delete-btn {
    background: none;
    border: none;
    font-size: 16px;
    cursor: pointer;
    padding: 5px;
    border-radius: 4px;
    transition: all 0.3s ease;
    margin-right: 5px;
}

.edit-btn {
    color: var(--primary-color);
}

.edit-btn:hover {
    background-color: rgba(255, 66, 157, 0.1);
}

.delete-btn {
    color: #dc3545;
}

.delete-btn:hover {
    background-color: rgba(220, 53, 69, 0.1);
}

/* Modal Styles */
.modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
}

.modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 30px;
    border-radius: 15px;
    min-width: 400px;
    max-width: 500px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f1f1f1;
}

.modal-title {
    margin: 0;
    color: #2c3e50;
    font-size: 1.5rem;
}

.close-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #6c757d;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.close-btn:hover {
    color: #495057;
}

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #2c3e50;
}

.form-input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}

.form-input:focus {
    outline: none;
    border-color: var(--primary-color);
}

.toggle-group {
    display: flex;
    align-items: center;
    gap: 15px;
}

.modal-buttons {
    display: flex;
    gap: 15px;
    justify-content: flex-end;
    margin-top: 25px;
}

.save-btn, .cancel-btn {
    padding: 12px 25px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
}

.save-btn {
    background-color: var(--primary-color);
    color: white;
}

.save-btn:hover {
    background-color: #e63384;
}

.cancel-btn {
    background-color: #6c757d;
    color: white;
}

.cancel-btn:hover {
    background-color: #5a6268;
}
{% endblock %}

{% block content %}
<!-- Category Header -->
<div class="category-header">
    <h2 style="margin: 0; color: #2c3e50;">Category Management</h2>
    <button class="add-category-btn" onclick="openAddModal()">
        <i class="fas fa-plus"></i>
        Add Category
    </button>
</div>

<!-- Category Table -->
<div class="category-table-container">
    <table class="category-table">
        <thead>
            <tr>
                <th>S.No</th>
                <th>Category Name</th>
                <th>List / Unlist</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for category in categories %}
            <tr>
                <td>{{ forloop.counter }}</td>
                <td>{{ category.name }}</td>
                <td>
                    <label class="status-toggle">
                        <input type="checkbox" {% if category.is_listed %}checked{% endif %} 
                               onchange="toggleCategoryStatus({{ category.id }}, this.checked)">
                        <span class="toggle-slider"></span>
                    </label>
                </td>
                <td>
                    <button class="edit-btn" onclick="editCategory({{ category.id }}, '{{ category.name }}', {{ category.is_listed|yesno:'true,false' }})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="delete-btn" onclick="deleteCategory({{ category.id }}, '{{ category.name }}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="4" style="text-align: center; padding: 40px; color: #6c757d;">
                    No categories found
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<!-- Add/Edit Category Modal -->
<div id="categoryModal" class="modal-overlay">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Add New Category</h3>
            <button class="close-btn" onclick="closeModal()">&times;</button>
        </div>
        <form id="categoryForm">
            {% csrf_token %}
            <input type="hidden" id="categoryId" name="category_id">
            <div class="form-group">
                <label class="form-label" for="categoryName">Name:</label>
                <input type="text" id="categoryName" name="name" class="form-input" required>
            </div>
            <div class="form-group">
                <div class="toggle-group">
                    <label class="form-label">List / Unlist:</label>
                    <label class="status-toggle">
                        <input type="checkbox" id="categoryStatus" name="is_listed" checked>
                        <span class="toggle-slider"></span>
                    </label>
                </div>
            </div>
            <div class="modal-buttons">
                <button type="submit" class="save-btn">Save</button>
                <button type="button" class="cancel-btn" onclick="closeModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>
{% endblock %}

{% block extra_js %}
let isEditMode = false;

function openAddModal() {
    isEditMode = false;
    document.getElementById('modalTitle').textContent = 'Add New Category';
    document.getElementById('categoryForm').reset();
    document.getElementById('categoryId').value = '';
    document.getElementById('categoryStatus').checked = true;
    document.getElementById('categoryModal').style.display = 'block';
}

function editCategory(id, name, isListed) {
    isEditMode = true;
    document.getElementById('modalTitle').textContent = 'Edit Category';
    document.getElementById('categoryId').value = id;
    document.getElementById('categoryName').value = name;
    document.getElementById('categoryStatus').checked = isListed;
    document.getElementById('categoryModal').style.display = 'block';
}

function closeModal() {
    document.getElementById('categoryModal').style.display = 'none';
    document.getElementById('categoryForm').reset();
}

function toggleCategoryStatus(categoryId, newStatus) {
    fetch(`/admin/categories/${categoryId}/toggle-status/`, {
        method: 'POST',
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            'is_listed': newStatus
        })
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            // Revert the toggle
            event.target.checked = !newStatus;
            alert('Error updating category status');
        }
    })
    .catch(error => {
        // Revert the toggle
        event.target.checked = !newStatus;
        alert('Error updating category status');
    });
}

function deleteCategory(categoryId, categoryName) {
    if (confirm(`Are you sure you want to delete "${categoryName}"?`)) {
        fetch(`/admin/categories/${categoryId}/delete/`, {
            method: 'DELETE',
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Error deleting category');
            }
        })
        .catch(error => {
            alert('Error deleting category');
        });
    }
}

// Handle form submission
document.getElementById('categoryForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const url = isEditMode ? 
        `/admin/categories/${document.getElementById('categoryId').value}/update/` : 
        '/admin/categories/create/';
    
    fetch(url, {
        method: 'POST',
        headers: {
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
        },
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error saving category');
        }
    })
    .catch(error => {
        alert('Error saving category');
    });
});

// Close modal when clicking outside
document.getElementById('categoryModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeModal();
    }
});
{% endblock %}